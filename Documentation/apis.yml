openapi: 3.0.3
info:
  title: FoodWaste - OpenAPI 3.0
  description: |-
    FoodWaste API
  version: 1.0.11
paths:
  /:
    get:
      summary: root URL
      tags:
        - Root
      responses:
        "200":
          description: successful operation
  /forecast/occupancy:
    get:
      tags:
        - Forecast
      summary: Get forecasted occupancy
      description: Get forecasted occupancy (number of people) in different locations
      parameters:
        - name: days
          in: query
          description: Number of days to forecast
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReceiptPrediction"
        "400":
          description: Invalid query argument
  /forecast/biowaste:
    get:
      tags:
        - Forecast
      summary: Get predicted waste amount
      description: Get predicted waste amount (in kilograms) of different waste types per day
      parameters:
        - name: days
          in: query
          description: Number of days to forecast
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BiowastePrediction"
        "400":
          description: Invalid query argument
  /forecast/biowaste_from_meals:
    get:
      tags:
        - Forecast
      summary: Get predicted waste amount
      description: Get predicted waste amount (in kilograms) of different waste types from number of sold meals
      parameters:
        - name: restaurant
          in: query
          description: Restaurant
          required: true
          schema:
            type: string
            enum: [Chemicum, Physicum, Exactum]
        - name: num_fish
          in: query
          description: Number of fish meals
          required: true
          schema:
            type: integer
        - name: num_chicken
          in: query
          description: Number of chicken meals
          required: true
          schema:
            type: integer
        - name: num_vegetarian
          in: query
          description: Number of vegetarian meals
          required: true
          schema:
            type: integer
        - name: num_meat
          in: query
          description: Number of meat meals
          required: true
          schema:
            type: integer
        - name: num_vegan
          in: query
          description: Number of vegan meals
          required: true
          schema:
            type: integer
        - name: return_type
          in: query
          description: Return type
          required: true
          schema:
            type: string
            enum: [image, numeric]
      responses:
        "200":
          description: successful operation
          content:
            image/png:
              schema:
                type: string
                format: binary
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BiowasteFromMealPredictionJSON"
        "400":
          description: Invalid query argument
  /forecast/co2_from_meals:
    get:
      tags:
        - Forecast
      summary: Get predicted CO2 given no. meals per type
      description: Get predicted CO2 amount given different waste types from number of sold meals
      parameters:
        - name: restaurant
          in: query
          description: Restaurant
          required: true
          schema:
            type: string
            enum: [Chemicum, Physicum, Exactum]
        - name: num_fish
          in: query
          description: Number of fish meals
          required: true
          schema:
            type: integer
        - name: num_chicken
          in: query
          description: Number of chicken meals
          required: true
          schema:
            type: integer
        - name: num_vegetarian
          in: query
          description: Number of vegetarian meals
          required: true
          schema:
            type: integer
        - name: num_meat
          in: query
          description: Number of meat meals
          required: true
          schema:
            type: integer
        - name: num_vegan
          in: query
          description: Number of vegan meals
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: successful operation
          content:
            image/png:
              schema:
                type: string
                format: binary
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CO2FromMealPredictionJSON"
        "400":
          description: Invalid query argument
  /forecast/receipts:
    get:
      tags:
        - Forecast
      summary: Get forecasted receipt quantity per restaurant per day
      description: Get forecasted receipt quantity per restaurant per day
      parameters:
        - name: days
          in: query
          description: Number of days to forecast
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReceiptPrediction"
        "400":
          description: Invalid query argument
  /data/meals:
    get:
      tags:
        - Forecast
      summary: Get meal forecast per restaurant per day
      description: Get meal forecast by day by restaurant
      parameters:
        - name: days
          in: query
          description: Number of days to forecast
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MealPrediction"
        "400":
          description: Invalid query argument

  /data/menus:
    get:
      tags:
        - Data
      summary: Get menu
      responses:
        "200":
          description: successful operation

  /fwowebserver:
    get:
      tags:
        - Other
      summary: root URL
      responses:
        "200":
          description: successful operation

  /dbtest:
    get:
      tags:
        - Other
      summary: Test DB URI
      responses:
        "200":
          description: successful operation

  /api/data:
    get:
      tags:
        - Data
      summary: ???
      responses:
        "200":
          description: successful operation

components:
  schemas:
    ReceiptPrediction:
      type: object
      properties:
        Chemicum:
          type: number
          format: float
          example: 2.3504778
        Physicum:
          type: number
          format: float
          example: 7.873081
        Exactum:
          type: number
          format: float
          example: 2.3242
        datetime:
          type: string
          example: "2024-05-14 09:00:00"
    BiowasteFromMealPredictionJSON:
      type: object
      properties:
        date:
          type: string
          format: date
          example: "2024-05-09"
        predicted_num_receipts:
          type: number
          format: integer
          example: 641
        predicted_waste_customer:
          type: number
          format: float
          example: 15.926
        predicted_waste_kitchen:
          type: number
          format: float
          example: 13.172
        predicted_waste_per_customer:
          type: number
          format: float
          example: 45.39
    CO2FromMealPredictionJSON:
      type: object
      properties:
        predicted_co2:
          type: number
          format: float
          example: 154.926
    BiowastePrediction:
      type: object
      properties:
        Chemicum:
          type: object
          properties:
            amnt_waste_customer:
              type: number
              format: float
              example: 7.87
            amnt_waste_coffee:
              type: number
              format: float
              example: 6.74
            amnt_waste_kitchen:
              type: number
              format: float
              example: 13.12
            amnt_waste_hall:
              type: number
              format: float
              example: 12.76
        Physicum:
          type: object
          properties:
            amnt_waste_customer:
              type: number
              format: float
              example: -0.0909
            amnt_waste_coffee:
              type: number
              format: float
              example: 11.2897
            amnt_waste_kitchen:
              type: number
              format: float
              example: 12.328253081
            amnt_waste_hall:
              type: number
              format: float
              example: 0.177681
        Exactum:
          type: object
          properties:
            amnt_waste_customer:
              type: number
              format: float
              example: 5.210
            amnt_waste_coffee:
              type: number
              format: float
              example: 1.409
            amnt_waste_kitchen:
              type: number
              format: float
              example: 8.273
            amnt_waste_hall:
              type: number
              format: float
              example: -1.39208
        date:
          type: string
          example: "2024-05-09"
    MealPrediction:
      type: object
      properties:
        Chemicum:
          type: object
          properties:
            num_NotMapped:
              type: number
              format: float
              example: 7.87
            num_chicken:
              type: number
              format: float
              example: 6.74
            num_fish:
              type: number
              format: float
              example: 13.12
            num_meat:
              type: number
              format: float
              example: 12.76
            num_vegan:
              type: number
              format: float
              example: 12.76
            num_vegetable:
              type: number
              format: float
              example: 12.76
        Physicum:
          type: object
          properties:
            num_NotMapped:
              type: number
              format: float
              example: 7.87
            num_chicken:
              type: number
              format: float
              example: 6.74
            num_fish:
              type: number
              format: float
              example: 13.12
            num_meat:
              type: number
              format: float
              example: 12.76
            num_vegan:
              type: number
              format: float
              example: 12.76
            num_vegetable:
              type: number
              format: float
              example: 12.76
        Exactum:
          type: object
          properties:
            num_NotMapped:
              type: number
              format: float
              example: 7.87
            num_chicken:
              type: number
              format: float
              example: 6.74
            num_fish:
              type: number
              format: float
              example: 13.12
            num_meat:
              type: number
              format: float
              example: 12.76
            num_vegan:
              type: number
              format: float
              example: 12.76
            num_vegetable:
              type: number
              format: float
              example: 12.76
        date:
          type: string
          example: "2024-05-09"
